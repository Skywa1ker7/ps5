print("Oh no!")
} else{
print("Yay!")
}
remove_digits()<- "abc"
x <- "abc"
if(grepl("\\d",x)){
print("Oh no!")
} else{
print("Yay!")
}
seconds_per_year <- 60*24*365
seconds_per_year
seconds_per_year <- 60*60*24*365
cat("There are",seconds_per_year, "seconds, in a year.")
cat("There are",seconds_per_year, "seconds,in a year.")
agesec <- my_age*seconds_per_year
my_age = 19
cat("I am", my_age, "\n")
my_name <- "Alex"
cat("I am", my_name, "\n")
agesec <- my_age*seconds_per_year
cat("I am", agesec, "seconds old.")
I_am_old <- agesec>650000000
I_am_old
I_am_old <- agesec > 650000000
print(I_am_old)
print(I_am_old", I am not older than 650M seconds")
I_am_old <- agesec > 650000000
print(I_am_old, ", I am not older than 650M seconds")
x <- 650000000
y <- agesec
x>y
x <- 650000000
y <- agesec
x<y
x<y <-I_am_old
x <- 650000000
y <- agesec
x<y <-I_am_old
lifetime <- seconds_per_year*73
print("The typical human lifetime is " ,liftime,"seconds.")
lifetime <- seconds_per_year*73
print("The typical human lifetime is " ,liftime,"seconds.")
print("The typical human lifetime is",liftime,"seconds.")
cat("The typical human lifetime is",liftime,"seconds.")
cat("The typical human lifetime is" ,liftime, "seconds.")
lifetime <- seconds_per_year*73
lifetime
cat("The typical human lifetime is" ,liftime, "seconds.")
cat("The typical human lifetime is", lifetime, "seconds.")
## Write a function called `make_introduction` that takes in two
## arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name,age) {
return(paste("Hello, my name is" ,name,"and I'm",as.character(age),"years old"))
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <-sub("Hello, my name is","Hey, I'm", my_intro)
print(casual_intro)
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- toupper(my_intro)
print(loud_intro)
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro,"e")
print(occurrences)
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(num){
return(num*2)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years = double(31536000)
print(seconds_in_two_years)
## Write another function `cube` that takes in a value and returns that value
## cubed
cube <- function(num){
return(num^3)
}
## Create a (suitably named) variable by passing the number 3 to your `cube`
## function
cubed_num <- cube(3)
print(cubed_num)
## Use for-loop to print cubes of numbers 1..10
## Hint: see course book
# https://faculty.washington.edu/otoomet/info201-book/functions.html#for-loops
for(i in 1:10) {
i2 <- i^3
cat(i, "^2 = ", i2, "\n", sep="")
}
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("A New Hope","Empire Strikes Back","Return of the Jedi",
"The Phantom Menace","Atatck of the Clones","Revenge of the Sith")
print(movies)
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- head(movies,3)
print(top_three)
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
print(excited)
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
print(without_four)
## Create a vector `numbers` that is the numbers 70 through 79
numbers <-c(70:79)
print(numbers)
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <-length(numbers)
print(len)
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <-mean(numbers)
print(numbers_mean)
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- c(60:69)
print(lower_numbers)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers,numbers)
print(all_numbers)
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
numbers_greater_than_70 <- c(all_numbers > 70)
print(numbers_greater_than_70)
## Out of your all numbers, extract only those that are
## smaller than 70
indices <- c(1:10)
all_numbers[indices]
print(all_numbers[indices])
## Compute squares of all those numbers that are smaller
## than 70 in your vector
squares_of_numbers_smaller_than_70 <- all_numbers[indices]^2
print(squares_of_numbers_smaller_than_70)
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
modulo_of_numbers <- all_numbers%%2
print(modulo_of_numbers)
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_numbers <- all_numbers[all_numbers%%2==0]
print(even_numbers)
I_am_old <- agesec>650000000
I_am_old
I_am_old <- agesec>650000000
if(agesec >650000000){
print("Im odl")
}
print("Im odl")
}
I_am_old <- agesec>650000000
if(agesec >650000000){
print("Im odl")
}
I_am_old
I_am_old <- agesec>650000000
cat(I_am_old)
cat(I_am_old, "hjf")
I_am_old <- agesec>650000000
cat(I_am_old, "I'm not more than 650M seconds old.")
cat(I_am_old, ", I'm not more than 650M seconds old.")
I_am_old <- agesec>650000000
cat(I_am_old,", I'm not more than 650M seconds old.")
occurrences <- str_count(my_intro,"e")
print(occurrences)
seconds_in_two_years = double(31536000)
print(seconds_in_two_years)
cube <- function(num){
return(num^3)
cube <- function(num){
return(num^3)
}
cube <- function(num){
return(num^3)
}
seconds_in_two_years = double(31536000)
print(seconds_in_two_years)
library(stringr)
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Alex"
cat("I am", my_name, "\n")
## ---------- end of the example ----------
## Create a numeric variable `my_age` that is equal to your age
my_age = 19
cat("I am", my_age, "\n")
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds_per_year <- 60*60*24*365
cat("There are",seconds_per_year, "seconds,in a year.")
## What is your age in seconds?  Use the variable 'my_age' you computed
## above and seconds-in-year, and compute it.  Assign the result to a
## suitable named variable
agesec <- my_age*seconds_per_year
cat("I am", agesec, "seconds old.")
## Are you more than 650M seconds old?  Perform such logical operation and
## assign the result to a variable 'I_am_old'.  Print the result with a
## suitable message
I_am_old <- agesec>650000000
cat(I_am_old,", I'm not more than 650M seconds old.")
### How many seconds is a typical human lifetime?
lifetime <- seconds_per_year*73
cat("The typical human lifetime is", lifetime, "seconds.")
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two
## arguments: name, and age.
## This function should return a string value that says something like
## "Hello, my name is {name}, and I'm {age} years old".
## NB!  It should _return_ the string, not print it!
make_introduction <- function(name,age) {
return(paste("Hello, my name is" ,name,"and I'm",as.character(age),"years old"))
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age`
## into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name,my_age)
print(my_intro)
## Create a variable `casual_intro` by substituting "Hello, my name is ",
## with "Hey, I'm" in your `my_intro`
## variable.  Check out stringr functions
## 'str_replace' and 'str_replace_all'
casual_intro <-sub("Hello, my name is","Hey, I'm", my_intro)
print(casual_intro)
## Create a new variable `loud_intro`, which is your `my_intro` variable
## in all upper-case letters
loud_intro <- toupper(my_intro)
print(loud_intro)
## Using the `str_count` function, create a variable `occurrences` that
## stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro,"e")
print(occurrences)
## Write another function `double` that takes in a (numeric) variable
## and returns that variable multiplied by two
double <- function(num){
return(num*2)
}
## Using your `double` function, create a variable `seconds_in_two_years`,
## which is the number of seconds in two years.
## Always print your results!
seconds_in_two_years = double(31536000)
print(seconds_in_two_years)
## Write another function `cube` that takes in a value and returns that value
## cubed
cube <- function(num){
return(num^3)
}
## Create a (suitably named) variable by passing the number 3 to your `cube`
## function
cubed_num <- cube(3)
print(cubed_num)
## Use for-loop to print cubes of numbers 1..10
## Hint: see course book
# https://faculty.washington.edu/otoomet/info201-book/functions.html#for-loops
for(i in 1:10) {
i2 <- i^3
cat(i, "^2 = ", i2, "\n", sep="")
}
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("A New Hope","Empire Strikes Back","Return of the Jedi",
"The Phantom Menace","Atatck of the Clones","Revenge of the Sith")
print(movies)
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- head(movies,3)
print(top_three)
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
print(excited)
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
print(without_four)
## Create a vector `numbers` that is the numbers 70 through 79
numbers <-c(70:79)
print(numbers)
## Using the built in length function, create a variable `len` that
## is equal to the length of your vector
## `numbers`
len <-length(numbers)
print(len)
## Using the `mean` function, create a variable `numbers_mean` that
## is the mean of your vector `numbers`
numbers_mean <-mean(numbers)
print(numbers_mean)
## Create a vector `lower_numbers` that is the numbers 60:69
lower_numbers <- c(60:69)
print(lower_numbers)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
## Ensure the result looks right!
all_numbers <- c(lower_numbers,numbers)
print(all_numbers)
## Which numbers (out of all_numbers) are larger than 70?
## Use logical operations to create a logical
## vector (TRUES/FALSES) that tell which number is larger
numbers_greater_than_70 <- c(all_numbers > 70)
print(numbers_greater_than_70)
## Out of your all numbers, extract only those that are
## smaller than 70
indices <- c(1:10)
all_numbers[indices]
print(all_numbers[indices])
## Compute squares of all those numbers that are smaller
## than 70 in your vector
squares_of_numbers_smaller_than_70 <- all_numbers[indices]^2
print(squares_of_numbers_smaller_than_70)
## Compute modulo by 2 of all your numbers.
## Hint: check out the modulo operator '%%'
modulo_of_numbers <- all_numbers%%2
print(modulo_of_numbers)
## Print even numbers only in your vector.
## Do _not_ create the subvector manually, use modulo operator and logical
## indexing to extract the even numbers!
even_numbers <- all_numbers[all_numbers%%2==0]
print(even_numbers)
### ------------------ Challenge ------------------
## Write a function `remove_digits` that will remove all digits
## (i.e. characters '0' through '9')
## from all elements in a
## *vector of strings*.
## For instance, "a2b" -> "ab"
remove_digits<-function(rd){
for(i in 1:length(rd)){
rd[i] <- gsub("[0-9]+","",rd[i])
}
for(i in 1:length(rd)){
print(rd[i])
}
}
## Demonstrate that your approach is successful by passing a
## vector of courses to your function
## For example,
## RemoveDigits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## should return
## c("INFO "    "CSE "     "mps-c"    "K-team '")
remove_digits(c("INFO 201", "CSE 142", "mps-803c", "K2-team '21"))
## Write an if/else statement that checks to see if your vector has any digits.
## If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
## Hint: check out the functions 'any' and 'all'
x <- "abc"
if(grepl("\\d",x)){
print("Oh no!")
} else{
print("Yay!")
}
install.packages("stringr")
install.packages("stringr")
x <- c("INFO", "CSE", "mps-c", "K-team" )
if(grepl("\\d",x)){
print("Oh no!")
} else{
print("Yay!")
}
x <- c("INFO" "CSE" "mps-c" "K-team" )
x <- c("INFO", "CSE", "mps-c", "K-team" )
if(grepl("\\d",x))
print("Oh no!")
I_am_old <- agesec>650000000
agesec <- my_age*seconds_per_year
my_age = 19
cat("I am", my_age, "\n")
## How many seconds is there in a year?  Compute this number!
## Assign it to a suitably named variable and print the result
## with a informative message
seconds_per_year <- 60*60*24*365
cat("There are",seconds_per_year, "seconds,in a year.")
agesec <- my_age*seconds_per_year
cat("I am", agesec, "seconds old.")
I_am_old <- agesec>650000000
if(!(I_am_old==FALSE)){
print("I'm not more than 650M seconds old.")
}
I_am_old <- agesec>650000000
if(!(I_am_old==FALSE)){
print("I'm not more than 650M seconds old.")
}
setwd("~/Desktop/Info201/ps5")
library(tidyverse)
library(dplyr)
df <- read_delim("data/gapminder.csv.csv")
df <- read_delim("data/gapminder.csv")
View(df)
View(df)
```{r}
```{r}
#(2pt) Load data. How many rows/columns do we have?
#3. (2pt) Print a small sample of data. Does it look OK?
nrow(df)
ncol(df)
print("It has", nrow(df), "rows, and",ncol(df), "columns")
nrow(df)
ncol(df)
x <- nrow(df)
y <- ncol(df)
print("It has", x, "rows, and",x, "columns")
x <- nrow(df)
y <- ncol(df)
x
cat("It has", x, "rows, and",x, "columns")
cat("It has", x, "rows, and",y, "columns")
df %>%
sample_n(10)
count(df$iso3)
#1. (3pt) How many countries are there in the dataset? Analyze all three: iso3, iso2 and name.
nrow(df$iso3)
nrow(df$iso3)
#1. (3pt) How many countries are there in the dataset? Analyze all three: iso3, iso2 and name.
count(unique(df['iso3']))
count(unique(df['iso3']))
count(unique(df['iso2']))
count(unique(df['name']))
count((df['iso2']))
count((df['name']))
count((df['iso3']))
count((df['name']))
df %>%
filter(!is.na(time),!is.na(time)) %>%
summarise(maximum_year = max(time), minimum_year = min(time))
sum(is.na(df$co2))
sum(is.na(df$co2_PC))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
summarise(maximum_year = max(time), minimum_year = min(time))
df %>%
select(3:5) %>%
is.na %>%
`!` %>%
rowSums
df %>%
group_by(time) %>%
summarise(maximum_year = sum(time), minimum_year = sum(time))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(maximum_year = sum(time), minimum_year = sum(time))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(maximum_year = sum(time), minimum_year = sum(time))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= sum(time))
sum(is.na(df$co2))
sum(is.na(df$co2_PC))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time))
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time)) %>%
head(3)
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time)) %>%
tail(3)
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time)) %>%
head(3)
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(co2)) %>%
head(3)
df %>%
filter(is.na(co2),is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(co2)) %>%
head(3)
df %>%
filter(!is.na(co2),!is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time)) %>%
head(3)
df %>%
filter(!is.na(co2),!is.na(co2_PC)) %>%
group_by(time) %>%
summarise(years= n_distinct(time)) %>%
head(3)
